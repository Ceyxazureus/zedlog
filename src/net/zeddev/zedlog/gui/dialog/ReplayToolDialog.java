/* Copyright (C) 2013  Zachary Scott <zscott.dev@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package net.zeddev.zedlog.gui.dialog;

import java.awt.Frame;
import java.util.List;
import net.zeddev.zedlog.logger.LogEntry;
import net.zeddev.zedlog.logger.LogEvent;
import net.zeddev.zedlog.logger.impl.CompositeDataLogger;
import net.zeddev.zedlog.logger.tools.ReplayTool;
import net.zeddev.zedlog.logger.tools.ReplayToolObserver;

/**
 * Windows for running the <code>RepeatTool</code>
 *
 * @author Zachary Scott <zscott.dev@gmail.com>
 */
public class ReplayToolDialog extends javax.swing.JDialog implements ReplayToolObserver {

	private final ReplayTool tool;

	/**
	 * Creates new form <code>ReplayToolDialog</code>.
	 *
	 * @param loggers The
	 */
	public ReplayToolDialog(final Frame parent, final CompositeDataLogger loggers) {

		super(parent, true);

		final List<LogEntry> logEntries = loggers.logEntries();

		tool = new ReplayTool(logEntries);
		tool.addObserver(this);

		initComponents();
		setLocationRelativeTo(null);

		// setup the progress bar limits
		progressBar.setMaximum(logEntries.size());
		progressBar.setMinimum(0);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        lblCurrent = new javax.swing.JLabel();
        btnRun = new javax.swing.JToggleButton();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Replay Events Tool");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        progressBar.setToolTipText("");
        progressBar.setEnabled(false);

        lblCurrent.setText(" ");
        lblCurrent.setToolTipText("");

        btnRun.setText("Run");
        btnRun.setToolTipText("Start/stop the replay tool.");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        btnClose.setMnemonic('C');
        btnClose.setText("Close");
        btnClose.setToolTipText("Close the replay tool.");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(lblCurrent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCurrent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRun)
                    .addComponent(btnClose))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed

		if (btnRun.isSelected()) {

			progressBar.setValue(0);

			// start the simulation
			Thread toolThread = new Thread(tool);
			toolThread.start();

		} else {
			tool.stop();
		}

    }//GEN-LAST:event_btnRunActionPerformed

	private void shutdown() {
		tool.removeObserver(this);
		tool.stop();
		dispose();
	}

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
		shutdown();

    }//GEN-LAST:event_btnCloseActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		shutdown();
    }//GEN-LAST:event_formWindowClosing

	@Override
	public void replayedEvent(LogEvent event) {

		lblCurrent.setText(event.toString());

		// update the progress bar
		int progress = progressBar.getValue();
		progressBar.setValue(progress + 1);

	}

	@Override
	public void replayFinished() {
		btnRun.setSelected(false);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JToggleButton btnRun;
    private javax.swing.JLabel lblCurrent;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

}
