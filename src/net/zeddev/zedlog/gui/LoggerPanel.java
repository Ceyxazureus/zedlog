/* Copyright (C) 2013  Zachary Scott <zscott.dev@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package net.zeddev.zedlog.gui;

import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import net.zeddev.zedlog.logger.DataLogger;
import net.zeddev.zedlog.logger.DataLoggerObserver;
import net.zeddev.zedlog.logger.LogEntry;

/**
 * <code>DataLogger</code> view component.
 *
 * @author Zachary Scott <zscott.dev@gmail.com>
 */
public final class LoggerPanel extends javax.swing.JPanel implements DataLoggerObserver {

	private final DataLogger logger;

	/**
	 * Creates new form <code>LoggerPanel</code>.
	 *
	 */
	public LoggerPanel(final DataLogger logger) {

		initComponents();

		this.logger = logger;

		logger.addObserver(this);

	}

	public JTextArea getTxtLogEntries() {
		return txtLogEntries;
	}

	public void shutdown() {
		logger.removeObserver(this);
	}

	@Override
	public void finalize() throws Throwable {
		super.finalize();
		shutdown();
	}

	private DataLogger lastToNotify = null;

	private void addLog(final DataLogger logger, final LogEntry logEntry) {

		StringBuilder logEntries = new StringBuilder(getTxtLogEntries().getText());

		// add newline to separate different logger messages
		if (lastToNotify == null) {
			lastToNotify = logger;
		} else if (logger != lastToNotify) {

			// dont append if already a newline
			if (logEntries.charAt(logEntries.length()-1) != '\n')
				logEntries.append("\n");

			lastToNotify = logger;

		}

		logEntries.append(logEntry.getMessage());

		getTxtLogEntries().setText(logEntries.toString());

	}

	@Override
	public void notifyLog(final DataLogger logger, final LogEntry logEntry) {

		SwingUtilities.invokeLater(new Runnable() {
			public void run(){
				addLog(logger, logEntry);
			}
		});

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JScrollPane scrollLogEntries = new javax.swing.JScrollPane();
        txtLogEntries = new javax.swing.JTextArea();

        scrollLogEntries.setDoubleBuffered(true);
        scrollLogEntries.setEnabled(false);

        txtLogEntries.setEditable(false);
        txtLogEntries.setColumns(20);
        txtLogEntries.setLineWrap(true);
        txtLogEntries.setRows(5);
        scrollLogEntries.setViewportView(txtLogEntries);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollLogEntries, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollLogEntries, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea txtLogEntries;
    // End of variables declaration//GEN-END:variables
}
